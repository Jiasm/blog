// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

enum Positions {
    Unknown = 0;
    GK = 1;
    DF = 2;
    MF = 4;
    FW = 8;
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
  message MsgResult {
    string url = 1;
    string title = 2;
    string snippets = 3;
  }
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
  Positions Positions = 2;
}

// Unary request.
message AAARequest {
  // Whether Response should include username.
  bool fill_username = 4;

  // Whether Response should include OAuth scope.
  bool fill_oauth_scope = 5;
}

// Unary response, as configured by the request.
message AAAResponse {
  // The user the request came from, for verifying authentication was
  // successful.
  string username = 2;
  // OAuth scope.
  string oauth_scope = 3;
}

service TestService {
  // One request followed by one response.
  rpc UnaryCall(AAARequest) returns (AAAResponse);
}

